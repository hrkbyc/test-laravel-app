version: 2.1
orbs:
  aws-cli: circleci/aws-cli@2.0

jobs:
  test:
    docker:
      - image: circleci/php:8.0-fpm-buster-node
        environment:
          DB_HOST: 127.0.0.1
          DB_PORT: 3306
          DB_DATABASE: laravel_local
          DB_USERNAME: phper
          DB_PASSWORD: secret
      - image: circleci/mysql:8.0-ram
        command: [--max_allowed_packet=32M]
        environment:
          MYSQL_ROOT_PASSWORD: secret
          MYSQL_DATABASE: laravel_local
          MYSQL_USER: phper
          MYSQL_PASSWORD: secret

    steps:
      - checkout

      - run:
          name: Setting Access Permissions
          command: |
            chmod -R 777 ./backend/storage
            chmod -R 777 ./backend/bootstrap/cache

      - run:
          name: Install and configure the required packages
          command: |
            sudo apt-get -y update && \
            sudo apt-get -y install git libicu-dev libonig-dev libzip-dev unzip locales libfreetype6-dev libjpeg62-turbo-dev libpng-dev supervisor && \
            sudo apt-get clean && \
            sudo rm -rf /var/lib/apt/lists/* && \
            sudo docker-php-ext-install intl pdo_mysql zip bcmath pcntl && \
            sudo docker-php-ext-configure gd --with-freetype --with-jpeg && \
            sudo docker-php-ext-install -j$(nproc) gd exif

      - run: sudo sh -c "echo \"memory_limit = 2048M\" > /usr/local/etc/php/conf.d/memory.ini"
      - run: php -i | grep memory_limit

      # mysql
      - run:
          name: Get ready for mysql
          command: |
            dockerize -wait tcp://localhost:3306 -timeout 1m

      # composer
      - restore_cache:
          key: composer-v1-{{ checksum "./backend/composer.lock" }}
      - run: composer install -n --prefer-dist --working-dir=./backend
      - save_cache:
          key: composer-v1-{{ checksum "./backend/composer.lock" }}
          paths:
            - ./backend/vendor

      # node
      - restore_cache:
          keys:
            - npm-v3-{{ checksum "./backend/yarn.lock" }}
            - npm-v3-
      - run: yarn install --cwd ./backend
      - save_cache:
          key: npm-v3-{{ checksum "./backend/yarn.lock" }}
          paths:
            - ./backend/node_modules

      # .envファイルをcircleci経由で渡す
      - run:
          name: Base64 decode env file
          command: echo $ENV | base64 -di > ./backend/.env

      - run: php ./backend/artisan migrate
      - run: php ./backend/vendor/bin/phpunit --configuration=./backend/phpunit.xml --testdox

  build:
    docker:
      - image: circleci/php:8.0-fpm-buster-node
    steps:
      - checkout
      - setup_remote_docker
      - aws-cli/setup

      - run:
          name: Setting Access Permissions
          command: |
            chmod -R 777 ./backend/storage
            chmod -R 777 ./backend/bootstrap/cache

      - run:
          name: Install and configure the required packages
          command: |
            sudo apt-get -y update && \
            sudo apt-get -y install git libicu-dev libonig-dev libzip-dev unzip locales libfreetype6-dev libjpeg62-turbo-dev libpng-dev supervisor && \
            sudo apt-get clean && \
            sudo rm -rf /var/lib/apt/lists/* && \
            sudo docker-php-ext-install intl pdo_mysql zip bcmath pcntl && \
            sudo docker-php-ext-configure gd --with-freetype --with-jpeg && \
            sudo docker-php-ext-install -j$(nproc) gd exif

      # composer
      - run: sudo composer self-update --stable
      - restore_cache:
          key: composer-v1-{{ checksum "./backend/composer.lock" }}
      - run: composer install -n --prefer-dist --working-dir=./backend
      - save_cache:
          key: composer-v1-{{ checksum "./backend/composer.lock" }}
          paths:
            - ./backend/vendor
      # .envファイルをcircleci経由で渡す
      - run:
          name: Base64 decode env file
          command: echo $ENV | base64 -di > ./backend/.env

      - run:
          name: Build image
          command: |
            aws ecr get-login-password | docker login --username AWS --password-stdin ${ECR_DOMAIN}
            docker build -f ./infra/docker/nginx/Dockerfile -t ${ECR_DOMAIN}/test-laravel-app/web:$CIRCLE_SHA1 .
            docker build -f ./infra/docker/php/Dockerfile -t ${ECR_DOMAIN}/test-laravel-app/app:$CIRCLE_SHA1 .
            docker build -f ./infra/docker/mysql/Dockerfile -t ${ECR_DOMAIN}/test-laravel-app/db:$CIRCLE_SHA1 .

      - run:
          name: Push docker image
          command: |
            docker push ${ECR_DOMAIN}/test-laravel-app/web:$CIRCLE_SHA1
            docker push ${ECR_DOMAIN}/test-laravel-app/app:$CIRCLE_SHA1
            docker push ${ECR_DOMAIN}/test-laravel-app/db:$CIRCLE_SHA1

workflows:
  version: 2
  build_deploy:
    jobs:
      - test
      - build:
          requires:
            - test
          filters:
            branches:
              only: master